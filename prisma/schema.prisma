generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  name        String
  id          Int      @id @default(autoincrement())
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String    @default("404 bio")
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  topics        Topic[]
  comments      Comment[]
  likes         Like[]
  bookmarks     Bookmark[]
  commentlikes    CommentLike[]
}

model Topic {
  id      String  @id @default(cuid())
  bgImage String?
  title   String? 
  tags    Tag[]
  content String?
  isPublic Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes   Like[]
  bookmarks   Bookmark[]
  commentlikes    CommentLike[]
}

model Tag {
  id    String  @id @default(cuid())
  name  String?
  sub   String?
  topicId String
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model Comment {
  id    String @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId  String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userIcon  String
  userName  String
  topicId   String
  topic   Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  parentId  String?
  ancestorId  String?
  leafId    String?
  isLast    Boolean
  deleted   Boolean @default(false)
  commentlikes    CommentLike[]
}

model Like {
  id    String    @id @default(cuid())
  userId  String
  topicId   String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id    String    @id @default(cuid())
  topicId String 
  userId  String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model CommentLike {
  id  String    @id @default(cuid())
  commentId   String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId     String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  topicId   String
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
